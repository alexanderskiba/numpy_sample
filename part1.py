import numpy as np
# Создание массива из списка
# Главной особенностью numpy является объект array, массивы схожи со списками, исключая тот момент, что
# все элементы массива должны иметь одинаковый тип
first_list = [1,2,3,4]

a = np.array(first_list, float) # array принмает два аргумента: список для конвертации и тип для каждого элемента
# print(a)
# print(type(a))

# манипулировать можно так же, как и обычными списками
# print(a[:2])
# print(a[3])
# a[3] = 5
# print(a[3])
# # Массивы могут быть многомерными, можно задавать команды скобках
# пример двумерного массива (матрицы)
a = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], float)
# print(a)
# Срезы работают так же, как и с одномерными массивами

# print(a[1,:]) # вернет первый элемент (второй по счету массив)
# print()
# print(a[:,2]) # в каждом элементе(списке возьмет 2 элемент)
# print()
# print(a[-1:,-2:])
# print()
# print(a[1,: 2]) # здесь мы берем первый элемент (список [5,6,7,8]) и берем все элементы до второго невключительно
#
# print(a[:, 0:2])  # со всех элементов(списков) двумерного массива получим элементы(числа) до второго невключительно


# метод shape возвращает количество строк и столбцов в матрице
# print(a.shape)
# # метод dtype возвращает тип переменных кранящихся в массиве
# print(a.dtype)
# print(len(a))
# print(20 in a)

# Массивы можно переформировать с помощью метода reshape, который задает новый двумерный массив

a = np.array(range(10), float)
# print(a)
# переформатируем одномерный массив из 10 элементов в двумерный массив
# состоящий из 5 строк и двух столбцов
# метод reshape создает новый массив, а не переформатирует старый
aa = a.reshape(5,2)
# print(a.shape)
# print(aa.shape)

# Связывание имен работает и с массивами. Метод copy используется для создания существующего массива в памяти

a = np.array([1,2,3], float)
b = a
c = a.copy()
a[0] = 0
# print(a, b, c)
# списки можно создавать из массивов
# print(a.tolist())
# массив можно переконвертировать в бинарную строку
s = a.tostring()
# print(s)
m = np.fromstring(s)
# print(m)

# Заполнение массива одинаковым значением

a = np.array([1,3,4,5])
# print(a)
# a.fill(0)
# print(a)

# Транспонирование массива, создается новый массив
a = np.array([[0,0,0,0], [1,1,1,1], [2,2,2,2]], float)
# print(a)
# print('Транспонированный массив')
# print(a.transpose())

# многомерный массив можно переконвертировать в одномерный при помощи flatten
# print('Многомерный массив')
# print(a.flatten())


# массивы можно конкатенировать,если массив не одномерный, можно задать ось по которой будет происходить соединение
# по умолчанию происходит по первому измерению

b = np.array([[3,3,3,3],[4,4,4,4],[5,5,5,5]], float)
c = np.concatenate((a,b))
# print(c)
# print('Соединение по оси 1 ')
d = np.concatenate((a,b), axis=1)
# print(d)

# Размерность массива может быть увеличена при использовании константы newaxis в  квадратных скобках

a = np.array([1,2,3], float)
# print(a)
b = a[:,np.newaxis]
# print(b)
# print(b.shape)
c = b[np.newaxis,:]
print(c.shape)


